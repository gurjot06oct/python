Title: Matrix Reconstruction Puzzle

**Problem Statement:**

You are given a function `matrices_generator(n)` that generates an original square matrix of size `n x n` filled with random integers between 1 and `n*n`. This function also returns a function `check(i, j, v)` which takes row index `i`, column index `j`, and a value `v` as arguments, and checks if the value at the given position `(i, j)` in the original matrix is equal to `v`.

Additionally, the `matrices_generator(n)` function returns a list of permutations of the numbers from 0 to `n-1`, denoted as `permutations`. These permutations are generated using the provided function `permutations_fun(my_list)`.

Here's a detailed description of the problem:

1. **Input:**

   - You input an integer `n`, representing the number of dimensions of the square matrix.

2. **Transformation:**

   - The `matrices_generator` function generates an original matrix of size `n x n` filled with random integers between 1 and `n*n`.
   - It also prints the original matrix to the console.
   - It returns a `check` function which verifies if a given value `v` matches the value at the position `(i, j)` in the original matrix.
   - The `matrices_generator` function returns a list of permutations of the numbers from `0` to `n-1`, denoted as `permutations`. These permutations represent the possible shufflings of rows and columns of the original matrix.
   - It returns a `transformed_matrix`, generated by a transformed_matrix function, where the rows and columns of the original matrix have been shuffled randomly using one of the permutations from the `permutations` list.

3. **Output:**

   - Your task is to reconstruct the original matrix from the given transformed matrix and the `check` function
   - Output the original matrix as a list of lists, where each sublist represents a row in the matrix.

4. **Constraints:**
   - Solve this problem using only Python without using any external libraries like NumPy.
   - Ensure that the solution is optimized for performance and memory usage.

**Example:**

- **Original Matrix:**
  ---0--1--2
  0 [1, 2, 3]
  1 [4, 5, 6]
  2 [7, 8, 9]
- **Transformed Matrix:**
  ---2--0--1
  2 [9, 7, 8]
  0 [3, 1, 2]
  1 [6, 4, 5]

**Matrix Generator Function:**

```python
import random
def matrices_generator(n):
    original_matrix = [[random.randint(1,n*n) for  j in range(n)] for  i in range(n)]
    print(original_matrix)
    def check(i,j,v):
        return original_matrix[i][j] == v

    def permutations_fun(my_list):
        if len(my_list) <= 1:
            return [my_list]
        else:
            result = []
            for i in range(len(my_list)):
                first_element = my_list[i]
                remaining_elements = my_list[:i] + my_list[i+1:]
                for perm in permutations(remaining_elements):
                    result.append([first_element] + perm)
            return result
    permutations=permutations_fun(list(range(n)))
    def transformed_matrix():
        n_list=permutations[random.randint(0,len(permutations)-1)]
        return [[original_matrix[i][j] for  j in n_list] for  i in n_list]

    return check,permutations,transformed_matrix()
```
